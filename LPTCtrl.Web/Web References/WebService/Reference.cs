//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace LPTCtrl.Web.WebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'class' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LPTPortBinding", Namespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware/LPTCtrl.Hardware%2C%20V" +
        "ersion%3D1.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3Dnull")]
    public partial class LPTPortService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBitOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBitOperationCompleted;
        
        private System.Threading.SendOrPostCallback ToggleBitOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LPTPortService() {
            this.Url = global::LPTCtrl.Web.Properties.Settings.Default.LPTCtrl_Web_WebService_LPTPortService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCompletedEventHandler GetCompleted;
        
        /// <remarks/>
        public event SetCompletedEventHandler SetCompleted;
        
        /// <remarks/>
        public event GetBitCompletedEventHandler GetBitCompleted;
        
        /// <remarks/>
        public event SetBitCompletedEventHandler SetBitCompleted;
        
        /// <remarks/>
        public event ToggleBitCompletedEventHandler ToggleBitCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e#Get", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int Get() {
            object[] results = this.Invoke("Get", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAsync() {
            this.GetAsync(null);
        }
        
        /// <remarks/>
        public void GetAsync(object userState) {
            if ((this.GetOperationCompleted == null)) {
                this.GetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperationCompleted);
            }
            this.InvokeAsync("Get", new object[0], this.GetOperationCompleted, userState);
        }
        
        private void OnGetOperationCompleted(object arg) {
            if ((this.GetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompleted(this, new GetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e#Set", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e")]
        public void Set(int value) {
            this.Invoke("Set", new object[] {
                        value});
        }
        
        /// <remarks/>
        public void SetAsync(int value) {
            this.SetAsync(value, null);
        }
        
        /// <remarks/>
        public void SetAsync(int value, object userState) {
            if ((this.SetOperationCompleted == null)) {
                this.SetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOperationCompleted);
            }
            this.InvokeAsync("Set", new object[] {
                        value}, this.SetOperationCompleted, userState);
        }
        
        private void OnSetOperationCompleted(object arg) {
            if ((this.SetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e#GetBit", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool GetBit(int bit) {
            object[] results = this.Invoke("GetBit", new object[] {
                        bit});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBitAsync(int bit) {
            this.GetBitAsync(bit, null);
        }
        
        /// <remarks/>
        public void GetBitAsync(int bit, object userState) {
            if ((this.GetBitOperationCompleted == null)) {
                this.GetBitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBitOperationCompleted);
            }
            this.InvokeAsync("GetBit", new object[] {
                        bit}, this.GetBitOperationCompleted, userState);
        }
        
        private void OnGetBitOperationCompleted(object arg) {
            if ((this.GetBitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBitCompleted(this, new GetBitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e#SetBit", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e")]
        public void SetBit(int bit, bool value) {
            this.Invoke("SetBit", new object[] {
                        bit,
                        value});
        }
        
        /// <remarks/>
        public void SetBitAsync(int bit, bool value) {
            this.SetBitAsync(bit, value, null);
        }
        
        /// <remarks/>
        public void SetBitAsync(int bit, bool value, object userState) {
            if ((this.SetBitOperationCompleted == null)) {
                this.SetBitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBitOperationCompleted);
            }
            this.InvokeAsync("SetBit", new object[] {
                        bit,
                        value}, this.SetBitOperationCompleted, userState);
        }
        
        private void OnSetBitOperationCompleted(object arg) {
            if ((this.SetBitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e#ToggleBit", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/LPTCtrl.Hardware.LPTPort/LPTCtrl.Hardwar" +
            "e")]
        public void ToggleBit(int bit) {
            this.Invoke("ToggleBit", new object[] {
                        bit});
        }
        
        /// <remarks/>
        public void ToggleBitAsync(int bit) {
            this.ToggleBitAsync(bit, null);
        }
        
        /// <remarks/>
        public void ToggleBitAsync(int bit, object userState) {
            if ((this.ToggleBitOperationCompleted == null)) {
                this.ToggleBitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnToggleBitOperationCompleted);
            }
            this.InvokeAsync("ToggleBit", new object[] {
                        bit}, this.ToggleBitOperationCompleted, userState);
        }
        
        private void OnToggleBitOperationCompleted(object arg) {
            if ((this.ToggleBitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ToggleBitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetCompletedEventHandler(object sender, GetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetBitCompletedEventHandler(object sender, GetBitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetBitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ToggleBitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591